import 'dart:async';

import 'package:flutter/material.dart';

import 'circle_painter.dart';
import '../helper/color.dart';
import '../../helper/size.dart';

class Background extends StatefulWidget {
  const Background({super.key});

  @override
  _BackgroundState createState() => _BackgroundState();
}

class _BackgroundState extends State<Background> with TickerProviderStateMixin {
  late AnimationController controller1;
  late AnimationController controller2;
  late Animation<double> animation1;
  late Animation<double> animation2;
  late Animation<double> animation3;
  late Animation<double> animation4;

  @override
  void initState() {
    super.initState();

    controller1 = AnimationController(
      vsync: this,
      duration: const Duration(
        seconds: 5,
      ),
    );
    animation1 = Tween<double>(begin: .1, end: .15).animate(
      CurvedAnimation(
        parent: controller1,
        curve: Curves.easeInOut,
      ),
    )
      ..addListener(() {
        setState(() {});
      })
      ..addStatusListener((status) {
        if (status == AnimationStatus.completed) {
          controller1.reverse();
        } else if (status == AnimationStatus.dismissed) {
          controller1.forward();
        }
      });
    animation2 = Tween<double>(begin: .02, end: .04).animate(
      CurvedAnimation(
        parent: controller1,
        curve: Curves.easeInOut,
      ),
    )..addListener(() {
        setState(() {});
      });

    controller2 = AnimationController(
      vsync: this,
      duration: const Duration(
        seconds: 5,
      ),
    );
    animation3 = Tween<double>(begin: .41, end: .38).animate(CurvedAnimation(
      parent: controller2,
      curve: Curves.easeInOut,
    ))
      ..addListener(() {
        setState(() {});
      })
      ..addStatusListener((status) {
        if (status == AnimationStatus.completed) {
          controller2.reverse();
        } else if (status == AnimationStatus.dismissed) {
          controller2.forward();
        }
      });
    animation4 = Tween<double>(begin: 170, end: 190).animate(
      CurvedAnimation(
        parent: controller2,
        curve: Curves.easeInOut,
      ),
    )..addListener(() {
        setState(() {});
      });

    Timer(
      const Duration(milliseconds: 2500),
      () {
        controller1.forward();
      },
    );

    controller2.forward();
  }

  @override
  void dispose() {
    controller1.dispose();
    controller2.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return background(context: context);
  }

  Widget background({
    required BuildContext context,
  }) {
    return Stack(
      children: [
        Positioned(
          top: context.height * (animation2.value + .58),
          left: context.width * .21,
          child: CustomPaint(
            painter: CirclePainter(
              50,
              AppColor.instance,
            ),
          ),
        ),
        Positioned(
          top: context.height * .98,
          left: context.width * .1,
          child: CustomPaint(
            painter: CirclePainter(
              animation4.value - 30,
              AppColor.instance,
            ),
          ),
        ),
        Positioned(
          top: context.height * .5,
          left: context.width * (animation2.value + .8),
          child: CustomPaint(
            painter: CirclePainter(
              30,
              AppColor.instance,
            ),
          ),
        ),
        Positioned(
          top: context.height * animation3.value,
          left: context.width * (animation1.value + .1),
          child: CustomPaint(
            painter: CirclePainter(
              60,
              AppColor.instance,
            ),
          ),
        ),
        Positioned(
          top: context.height * .1,
          left: context.width * .8,
          child: CustomPaint(
            painter: CirclePainter(
              animation4.value,
              AppColor.instance,
            ),
          ),
        ),
      ],
    );
  }
}
